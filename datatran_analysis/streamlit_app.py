import pandas as pd
import streamlit as st
import io

st.set_page_config(
    page_title='An√°lise de Acidentes de Tr√¢nsito',
    initial_sidebar_state='expanded',
    layout='wide',
    page_icon='üöì',
    # TODO
    menu_items={
        'Get Help': 'https://www.google.com',
        'Report a bug': 'https://www.google.com',
        'About': '# This is a header. This is an *extremely* cool app!',
    },
)

with st.sidebar:

    uploaded_csv = st.file_uploader(
        'Fa√ßa o upload do seu arquivo .csv',
        type='csv',
    )

    if not uploaded_csv:

        st.warning(
            'Por favor, fa√ßa o upload do seu arquivo .csv para continuar.',
            icon='‚ö†Ô∏è',
        )
    else:
        st.success('Arquivo carregado com sucesso!', icon='üéâ')

if not uploaded_csv:
    st.write(
        '<h1 style="font-size: 30px;">üì• Para come√ßar, fa√ßa o upload de um arquivo .csv </h1>',
        unsafe_allow_html=True,
    )
    st.info(
        'Utilize um arquivo .csv de acidentes de tr√¢nsito dispon√≠vel no site de [Dados Abertos da PRF](https://www.gov.br/prf/pt-br/acesso-a-informacao/dados-abertos/dados-abertos-da-prf)',
        icon='‚ÑπÔ∏è',
    )
else:
    data = pd.read_csv(uploaded_csv, sep=';', encoding='latin1', decimal=',')
    st.write('# Sobre esse projeto')
    st.write(
        'Este √© um projeto de an√°lise de dados disponibilizados pela <span style="color: #FF6161">Pol√≠cia Rodovi√°ria Federal (PRF)</span>. O objetivo √© analisar e visualizar informa√ß√µes sobre acidentes de tr√¢nsito ocorridos em rodovias federais brasileiras. Para isso, utilizei a linguagem de programa√ß√£o <span style="color: #FF6161">Python</span>, as bibliotecas <span style="color: #FF6161">Pandas</span> e <span style="color: #FF6161">Potly</span> para desenvolvimento das an√°lises e cria√ß√£o dos gr√°ficos e o <span style="color: #FF6161">Streamlit</span> para organiza√ß√£o do dashboard.',
        unsafe_allow_html=True,
    )
    st.write(
        'Escolhi esse dataset pois acredito que a an√°lise de acidentes de tr√¢nsito √© uma forma de <span style="color: #FF6161">conscientizar</span> a popula√ß√£o sobre a import√¢ncia da seguran√ßa no tr√¢nsito e de incentivar a√ß√µes que visem a redu√ß√£o de acidentes e mortes nas rodovias brasileiras. Al√©m disso, a an√°lise desses dados pode contribuir para a elabora√ß√£o de <span style="color: #FF6161">pol√≠ticas p√∫blicas</span> e a√ß√µes de fiscaliza√ß√£o que visem a redu√ß√£o de acidentes e mortes no tr√¢nsito.',
        unsafe_allow_html=True,
    )

    st.write('## Apresentando o dataset')

    st.write(
        'Depois de selecionarmos as colunas que ser√£o utilizadas na an√°lise, o dataset ficou assim:'
    )
    
    data.drop(
        columns=[
            'id',
            'horario',
            'km',
            'sentido_via',
            'tracado_via',
            'uso_solo',
            'regional',
            'delegacia',
            'uop',
        ],
        inplace=True,
    )

    st.dataframe(data.head(10))
    st.write(
        'Nele j√° podemos ver algumas informa√ß√µes sobre os acidentes, como a <span style="color: #FF6161">data</span>, o <span style="color: #FF6161">dia da semana</span>, o <span style="color: #FF6161">munic√≠pio</span>, a <span style="color: #FF6161">causa do acidente</span>, o <span style="color: #FF6161">tipo de acidente</span>, o <span style="color: #FF6161">tipo de ve√≠culo</span>, a <span style="color: #FF6161">quantidade de feridos e mortos</span>, entre outros.',
        unsafe_allow_html=True,
    )
    st.divider()
    st.write('## Dicion√°rio de vari√°veis')
    st.write('A seguir, temos a descri√ß√£o de cada vari√°vel do dataset:')
    col1, col2 = st.columns(2)

    with col1:
        st.write(
            """
        - <span style="color: #FF6161">data_inversa</span>: Data do acidente
        - <span style="color: #FF6161">dia_semana</span>: Dia da semana do acidente
        - <span style="color: #FF6161">uf</span>: Estado onde ocorreu o acidente
        - <span style="color: #FF6161">br</span>: Rodovia onde ocorreu o acidente
        - <span style="color: #FF6161">municipio</span>: Munic√≠pio onde ocorreu o acidente
        - <span style="color: #FF6161">causa_acidente</span>: Causa do acidente
        - <span style="color: #FF6161">tipo_acidente</span>: Tipo do acidente
        - <span style="color: #FF6161">classificacao_acidente</span>: Classifica√ß√£o do acidente
        - <span style="color: #FF6161">fase_dia</span>: Fase do dia do acidente
        - <span style="color: #FF6161">condicao_metereologica</span>: Condi√ß√£o meteorol√≥gica no momento do acidente
        - <span style="color: #FF6161">tipo_pista</span>: Tipo da pista
        """,
            unsafe_allow_html=True,
        )

    with col2:
        st.write(
            """
        - <span style="color: #FF6161">pessoas</span>: Quantidade de pessoas envolvidas no acidente
        - <span style="color: #FF6161">mortos</span>: Quantidade de mortos no acidente
        - <span style="color: #FF6161">feridos_leves</span>: Quantidade de feridos leves no acidente
        - <span style="color: #FF6161">feridos_graves</span>: Quantidade de feridos graves no acidente
        - <span style="color: #FF6161">ilesos</span>: Quantidade de ilesos no acidente
        - <span style="color: #FF6161">ignorados</span>: Quantidade de pessoas com estado de sa√∫de ignorado
        - <span style="color: #FF6161">feridos</span>: Quantidade total de feridos no acidente
        - <span style="color: #FF6161">veiculos</span>: Quantidade de ve√≠culos envolvidos no acidente
        - <span style="color: #FF6161">latitude</span>: Latitude do local do acidente
        - <span style="color: #FF6161">longitude</span>: Longitude do local do acidente
        """,
            unsafe_allow_html=True,
        )
    st.divider()

    st.write('## Hora da Explora√ß√£o')
    st.write("Antes de come√ßar a explorar os dados, vamos dar uma olhadela nas colunas dispon√≠veis no dataset.")

    col1, col2 = st.columns(2)
    buffer = io.StringIO()
    data.info(buf=buffer)
    s = buffer.getvalue()

    with col1:
        st.code(s)

    st.write('√â poss√≠vel observar que nossas colunas est√£o sendo tratadas como <span style="color: #FF6161">object</span> e alguns registros est√£o com o valor <span style="color: #FF6161">None</span>. O que n√£o √© o ideal para a an√°lise de dados. Vamos corrigir isso!', unsafe_allow_html=True)

    st.write('### Limpeza e tratamento')
    st.write('Vamos come√ßar tratando os valores ausentes no dataset. Para isso, vamos preencher os valores ausentes com a string <span style="color: #FF6161">N√£o informado</span>.', unsafe_allow_html=True)
    
    col3, col4 = st.columns(2)
    with col3:
        data.fillna('N√£o informado', inplace=True)
        st.code('data.fillna("N√£o informado", inplace=True)', language='python')

    col5, col6 = st.columns([2, 1])
    with col5:
        data['data_inversa'] = pd.to_datetime(data['data_inversa'])
                
        data['dia_semana'] = data['dia_semana'].astype('category')
                
        data['uf'] = data['uf'].astype('category')
                
        data['br'] = data['br'].astype('category')
                
        data['municipio'] = data['municipio'].astype('category')
                
        data['causa_acidente'] = data['causa_acidente'].astype('category')
                
        data['tipo_acidente'] = data['tipo_acidente'].astype('category')
                
        data['classificacao_acidente'] = data['classificacao_acidente'].astype('category')
                
        data['fase_dia'] = data['fase_dia'].astype('category')
                
        data['condicao_metereologica'] = data['condicao_metereologica'].astype('category')
                
        data['tipo_pista'] = data['tipo_pista'].astype('category')
                
        data['latitude'] = data['latitude'].astype('float')
                
        data['longitude'] = data['longitude'].astype('float')

        st.write('Agora, vamos converter as colunas para os tipos de dados corretos.')
        st.code('''
        ### Convertendo o tipo do campo de data
        data['data_inversa'] = pd.to_datetime(data['data_inversa'])
                
        ### Convertendo o tipo das colunas para category
        data['dia_semana'] = data['dia_semana'].astype('category')
                
        data['uf'] = data['uf'].astype('category')
                
        data['br'] = data['br'].astype('category')
                
        data['municipio'] = data['municipio'].astype('category')
                
        data['causa_acidente'] = data['causa_acidente'].astype('category')
                
        data['tipo_acidente'] = data['tipo_acidente'].astype('category')
                
        data['classificacao_acidente'] = data['classificacao_acidente'].astype('category')
                
        data['fase_dia'] = data['fase_dia'].astype('category')
                
        data['condicao_metereologica'] = data['condicao_metereologica'].astype('category')
                
        data['tipo_pista'] = data['tipo_pista'].astype('category')
                
        data['latitude'] = data['latitude'].astype('float')
                
        data['longitude'] = data['longitude'].astype('float')
        ''', language='python')

        new_buffer = io.StringIO()
        data.info(buf=new_buffer)
        ns = new_buffer.getvalue()

        st.write('Agora, vamos verificar se os tipos de dados foram convertidos corretamente.')
        st.code(ns)
    st.write('Pronto! Agora temos os tipos de dados corretos para cada coluna do dataset.')
    st.write('Esse √© o resultado final do dataset ap√≥s a limpeza e tratamento dos dados:')
    st.dataframe(data.head(10))
    